{"version":3,"sources":["components/layout/Header.js","components/AddTodo.js","components/TodoItem.js","components/Todos.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","color","textAlign","padding","linkStyle","margin","position","right","top","Header","style","to","AddTodo","state","title","onChange","e","setState","target","name","value","onSubmit","preventDefault","props","addTodo","this","display","type","placeholder","newTodo","className","Component","propType","todo","PropTypes","array","isRequired","markComplete","func","delTodo","width","border","borderRadius","background","TodoItem","getStyle","completed","id","bind","btnStyle","onClick","cursor","Todos","todos","map","key","About","Fragment","aboutStyle","borderBottom","App","toggleOpenTodo","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c7bdf15f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nfunction Header() {\n  return (\n    <header style={headerStyle}>\n      <h1>myTodo</h1>\n      <Link style={linkStyle} to=\"/About\">â“˜</Link>\n    </header>\n  );\n}\n\nconst headerStyle = {\n  color: \"yellowgreen\",\n  textAlign: \"center\",\n  padding: \"10px\"\n};\n\nconst linkStyle = {\n  color: \"yellowgreen\",\n  margin: \"10px\",\n  position: \"absolute\",\n  right: \"29px\",\n  top: \"35px\",\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types'\n\nexport class AddTodo extends Component {\n  state = {\n    title: '',\n\n  }\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.addTodo(this.state.title);\n    this.setState({ title: '' });\n\n  }\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\n        <input name=\"title\" type=\"text\" placeholder=\"New Todo...\" style={newTodo} value={this.state.title} onChange={this.onChange} />\n        <button type=\"submitt\" value=\"submit\" className=\"btn\" >\n          +\n        </button>\n      </form>\n    );\n  }\n}\nAddTodo.propType = {\n  todo: PropTypes.array.isRequired,\n  markComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired,\n};\n\n\nconst newTodo = {\n  width: \"100%\",\n  padding: \"10px\",\n  border: \"1px solid rgb(90,90,90)\",\n  borderRadius: \"8px\",\n  background: \"rgb(50,50,50)\",\n  color: \"white\",\n};\nexport default AddTodo;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport class TodoItem extends Component {\n  getStyle = () => {\n    return {\n      color: this.props.todo.completed ? \"black\" : \"white\",\n    };\n  };\n\n  render() {\n    const { id, title, } = this.props.todo;\n    return (\n      <div style={this.getStyle()} className=\"todo-item\">\n        <p>\n          <input\n            type=\"checkbox\"\n            onChange={this.props.markComplete.bind(this, id)}\n          />{\" \"}\n          {title}\n          <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>\n            X\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\nTodoItem.propType = {\n  addTodo: PropTypes.func.isRequired,\n  markComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired,\n};\n\nconst btnStyle = {\n  background: \"rgb(90,90,90)\",\n  color: \"red\",\n  border: \"none\",\n  padding: \"2px 5px\",\n  borderRadius: \"50%\",\n  cursor: \"pointer\",\n  position: \"absolute\",\n  right: \"29px\",\n\n};\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport PropTypes from \"prop-types\";\nclass Todos extends Component {\n  render() {\n    return this.props.todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        markComplete={this.props.markComplete}\n        delTodo={this.props.delTodo}\n      />\n    ));\n  }\n}\nTodos.propType = {\n  todos: PropTypes.array.isRequired,\n  markComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired,\n};\n\nexport default Todos;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function About() {\n    return (\n        <React.Fragment>\n            <div>\n                <div style={aboutStyle}>\n                    <h2> About</h2>\n                    <p>myTodo app version:1.0.0 </p>\n                    <Link style={linkStyle} to=\"/\">Back</Link>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\nconst aboutStyle = {\n    color: \"white\",\n    background: \"rgb(50,50,50)\",\n    padding: \"10px\",\n    margin: \"2px\",\n    borderRadius: \"20px\",\n    borderBottom: \"1px solid rgb(10,10,10)\",\n}\nconst linkStyle = {\n    color: \"yellowgreen\"\n}","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios'\nimport Header from \"./components/layout/Header\";\nimport AddTodo from \"./components/AddTodo\";\nimport Todos from \"./components/Todos\";\nimport About from \"./components/pages/About\";\nimport uuid from 'react-uuid';\nimport \"./App.css\";\n\n\nclass App extends Component {\n  state = {\n    todos: []\n  };\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(res => this.setState({ todos: res.data }))\n\n  }\n  toggleOpenTodo = () => {\n\n  }\n  markComplete = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          (todo.completed === true) ? todo.completed = false : todo.completed = true;\n        }\n        return todo;\n      })\n    });\n  };\n\n  delTodo = id => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({\n        todos: [...this.state.todos.filter(todo => todo.id !== id)]\n      }))\n\n  }\n\n\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos/', {\n      title,\n      completed: false,\n    })\n      .then(res => this.setState({ todos: [...this.state.todos, res.data] }))\n\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos\n                  todos={this.state.todos}\n                  markComplete={this.markComplete}\n                  delTodo={this.delTodo}\n                />\n              </React.Fragment>\n            )} />\n            <Route path=\"/About\" component={About} />\n\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}